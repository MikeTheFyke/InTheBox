<!DOCTYPE html>
<html>
<head>
    <link href= "/public/assets/indexStyles.css" rel="stylesheet" type="text/css" />
    <link href="https://fonts.googleapis.com/css2?family=Lobster&display=swap" rel="stylesheet">
    
    <link href="/public/assets/TandPStyles.css" rel="stylesheet" type="text/css" />
</head>

<body>

    js <%- include('partials/_header') %>
    
    <div id="TandPContainer">
        <canvas id="TandPCanvas" width="700px" height="500px"></canvas>
    </div>

    <div id="TandPImageContainer">
        <img id="Terrance" src="/public/TandP/TFartFrames/T---Fart-T1.png">
        <img id="Phillip" src="/public/TandP/TFartFrames/T---Fart-P1.png">
    </div>

<script>
    var canvas = document.getElementById('TandPCanvas');
    var ctx = canvas.getContext('2d');
    var framesPerSecond = 30;

    var imgT = document.getElementById("Terrance");
    var imgP = document.getElementById("Phillip");

    var Xcord = 0;
    var Ycord = 0;

    var terranceFrame = "public/TandP/TFartFrames/T---Fart-T"
    var phillipFrame = "public/TandP/TFartFrames/T---Fart-P"

    var terranceFrame2 = "public/TandP/PFartFrames/P---Fart-T"
    var phillipFrame2 = "public/TandP/PFartFrames/P---Fart-P"

    function calculateMousePos(evt){      // an event fires when mouse moves
        var rect = canvas.getBoundingClientRect();
        var root = document.documentElement;
        var mouseX = evt.clientX - rect.left - root.scrollLeft;
        var mouseY = evt.clientY - rect.top - root.scrollTop;
        return {
        x:mouseX,   // Object Literal
        y:mouseY    // Object Literal
        };
    }

    window.onload = function() {
        setInterval(function() {
            drawEverything();            

        },1000/framesPerSecond);

        canvas.addEventListener ('mousedown', handleMouseClick); // handles mouseclick

        canvas.addEventListener ('mousemove',   // keypress, mouseclick, mousemove
        function(evt) {
            var mousePos = calculateMousePos(evt);
            Xcord = mousePos.x;
            Ycord = mousePos.y;
        });
    }

    function drawEverything() {
        ctx.fillStyle = '#27aae1';
        ctx.fillRect(0,0,canvas.width,canvas.height);
        ctx.drawImage(imgT, 0, 10);
        ctx.drawImage(imgP, 350, 10);
    }

    function handleMouseClick(evt){
        setTimeout(function (){
            if(Xcord <=350) {
                for (var a = 1; a < 14; a ++){
                    terranceFrame = terranceFrame + a +".png";
                    phillipFrame = phillipFrame + a +".png";
                    console.log(terranceFrame);
                    console.log(phillipFrame);
                    imgT.src = terranceFrame;
                    imgP.src = phillipFrame;

                        ctx.fillStyle = '#27aae1';
                        ctx.fillRect(0,0,canvas.width,canvas.height);
                        ctx.drawImage(imgT, 0, 10);
                        ctx.drawImage(imgP, 350, 10);

                    terranceFrame = "public/TandP/TFartFrames/T---Fart-T";
                    phillipFrame = "public/TandP/TFartFrames/T---Fart-P";
                }
            }
            if(Xcord > 350) {
                for (var a = 1; a < 14; a ++){
                    terranceFrame2 = terranceFrame2 + a +".png";
                    phillipFrame2 = phillipFrame2 + a +".png";
                    console.log(terranceFrame2);
                    console.log(phillipFrame2);
                    imgT.src = terranceFrame2;
                    imgP.src = phillipFrame2;
                        
                        ctx.fillStyle = '#27aae1';
                        ctx.fillRect(0,0,canvas.width,canvas.height);
                        ctx.drawImage(imgT, 0, 10);
                        ctx.drawImage(imgP, 350, 10);

                    terranceFrame2 = "public/TandP/PFartFrames/P---Fart-T";
                    phillipFrame2 = "public/TandP/PFartFrames/P---Fart-P";
                }
            }
        }, 300)
    };

    function calculateMousePos(evt){      // an event fires when mouse moves
        var rect = canvas.getBoundingClientRect();
        var root = document.documentElement;
        var mouseX = evt.clientX - rect.left - root.scrollLeft;
        var mouseY = evt.clientY - rect.top - root.scrollTop;
        return {
        x:mouseX,   // Object Literal
        y:mouseY    // Object Literal
        };
    }

</script>

</body>
</html>
