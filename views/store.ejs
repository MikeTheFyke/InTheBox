<!DOCTYPE html>
<html>
<head>
    <link href= "/public/assets/indexStyles.css" rel="stylesheet" type="text/css" />
    <link href="https://fonts.googleapis.com/css2?family=Lobster&display=swap" rel="stylesheet">
    
    <link rel="stylesheet" href="/public/assests/storeStyles.css" type="text/css" />
    <style></style>
</head>

<body>

    js <%- include('partials/_header') %>
    
    <div id="dimensionContainer">
        <h1>LETS BUILD YOUR CLOSET</h1>
        <input id="closetLength" type="number" placeholder="LENGTH" max="9" min="0" autofocus="true">
        <input id="closetHeight" type="number" placeholder="HEIGHT"  max="9" min="0">
        <input id="closetWidth" type="number" placeholder="WIDTH"  max="5" min="0">
    </div>

    <div id="doorContainer">
        <input id="doorCount" type="number" value="1"  max="2" min="1">
        <h1>HOW MANY DOORS?</h1>
    </div>

    <div id="shelfContainer">
            <input id="shelfCount" type="number" value="0"  max="3" min="0">
            <h1>ANY SHELVES ?</h1>
    </div>

    <div id="boxContainer">
            <input id="boxCount" type="number" value="0"  max="4" min="0">
            <h1>Boxes</h1>
    </div>

    <div id="storageContainer">
        <canvas id="storageCanvas" width="1000px" height="600px"></canvas>
    </div>

        <script>
            var canvas = document.getElementById('storageCanvas');
            var ctx = canvas.getContext('2d');
            var framesPerSecond = 30;

            var Xcord = 0;
            var Ycord = 0;
            var frontY1;
            var frontX1;
            const canvasWidth = 1000;
            const canvasHeight = 600;
            var cLength;
            var cWidth;
            var cHeight;

            var frontX1;
            var frontY1;
            var frontX2;
            var frontY2;
            var frontX3;
            var frontY3;
            var frontX4;
            var frontY4;

            var backX1;
            var backY1;
            var backX2;
            var backY2;
            var backX3;
            var backY3;
            var backX4;
            var backY4;

            var clicked = false;
            const gridCtr = 8;
            var doors = 0;
            var shelfCtr = 0;

    function calculateMousePos(evt){      // an event fires when mouse moves
        var rect = canvas.getBoundingClientRect();
        var root = document.documentElement;
        var mouseX = evt.clientX - rect.left - root.scrollLeft;
        var mouseY = evt.clientY - rect.top - root.scrollTop;
        return {
        x:mouseX,   // Object Literal
        y:mouseY    // Object Literal
        };
    }

    window.onload = function() {
        setInterval(function() {
            drawEverything();
            drawCloset();
            drawBox();
        },1000/framesPerSecond);

        canvas.addEventListener ('mousemove',   // keypress, mouseclick, mousemove
        function(evt) {
            var mousePos = calculateMousePos(evt);
            Xcord = mousePos.x;
            Ycord = mousePos.y;
            frontY1 = mousePos.y-(canvasHeight/2);
            frontX1 = mousePos.x-(canvasWidth/2);
        });
    }

function drawEverything() {
    ctx.fillStyle = "black"; // Canvas Black
    ctx.fillRect(0,0,canvas.width,canvas.height);
}

function drawCloset(){
    const yUnit = 60;  /// Defining a foot -> pixel scale - Y meaning Height scale
    const xUnit = 100; /// Defining a foot -> pixel scale - X meaning Length scale

    cLength = document.getElementById("closetLength").value; /// Receiving Closet Dimensions
    cWidth = document.getElementById("closetWidth").value; /// as whole numbers... hopefully.
    cHeight = document.getElementById("closetHeight").value;

    /// Defining front face of storage face co-ordinates. 
    frontX1 = (canvasWidth/2) - ((cLength*xUnit)/2);  /// converted to a pixel scale
    frontY1 = (canvasHeight/2) - ((cHeight*yUnit)/2); /// ie: 7 = 420px (7 X yUnit(60))
    frontX2 = (canvasWidth/2) + ((cLength*xUnit)/2);  /// ie: 7 = 700px (7 X xUnit(100))
    frontY2 = (canvasHeight/2) - ((cHeight*yUnit)/2);
    frontX3 = (canvasWidth/2) + ((cLength*xUnit)/2);
    frontY3 = (canvasHeight/2) + ((cHeight*yUnit)/2);
    frontX4 = (canvasWidth/2) - ((cLength*xUnit)/2);
    frontY4 = (canvasHeight/2) + ((cHeight*yUnit)/2);

    /// Defining back face of storage face co-ordinates. 
    const wUnit = (cWidth * 30); /// Defining a foot -> pixel scale - W meaning Width scale

    backX1 = frontX1 + wUnit;
    backY1 = frontY1 + wUnit;
    backX2 = frontX2 - wUnit;
    backY2 = frontY2 + wUnit;
    backX3 = frontX3 - wUnit;
    backY3 = frontY3 - wUnit;
    backX4 = frontX4 + wUnit;
    backY4 = frontY4 - wUnit;

    ctx.fillStyle = "red"; // Back side face
    ctx.beginPath();
    ctx.moveTo(backX1,backY1);
    ctx.lineTo(backX2,backY2);
    ctx.lineTo(backX3,backY3);
    ctx.lineTo(backX4,backY4);
    ctx.closePath();
    ctx.fill();

    ctx.fillStyle = "orange"; // Left side face
    ctx.beginPath();
    ctx.moveTo(frontX1,frontY1);
    ctx.lineTo(backX1,backY1);
    ctx.lineTo(backX4,backY4);
    ctx.lineTo(frontX4,frontY4);
    ctx.closePath();
    ctx.fill();

    ctx.fillStyle = "orange"; // Right side face
    ctx.beginPath();
    ctx.moveTo(backX2,backY1);
    ctx.lineTo(frontX2,frontY2);
    ctx.lineTo(frontX3,frontY3);
    ctx.lineTo(backX3,backY3);
    ctx.closePath();
    ctx.fill();

    ctx.fillStyle = "darkred"; // Roof face
    ctx.beginPath();
    ctx.moveTo(frontX1,frontY1);
    ctx.lineTo(frontX2,frontY2);
    ctx.lineTo(backX2,backY2);
    ctx.lineTo(backX1,backY1);
    ctx.closePath();
    ctx.fill();

    ctx.fillStyle = "darkred"; // Floor face
    ctx.beginPath();
    ctx.moveTo(backX4,backY4);
    ctx.lineTo(backX3,backY3);
    ctx.lineTo(frontX3,frontY3);
    ctx.lineTo(frontX4,frontY4);
    ctx.closePath();
    ctx.fill();

  drawGrid();

    //// Front Side Face & Door Logic
    if (document.getElementById("doorCount").value < 2){
      ctx.strokeStyle = "yellow"; // Front side face
      ctx.beginPath();
      ctx.moveTo(frontX1,frontY1);
      ctx.lineTo(frontX2,frontY2);
      ctx.lineTo(frontX3,frontY3);
      ctx.lineTo((frontX3) - ((cLength*xUnit)/3),frontY3);
      ctx.lineTo((frontX3) - ((cLength*xUnit)/3),frontY1 + ((cHeight*yUnit)/4));
      ctx.lineTo((frontX4) + ((cLength*xUnit)/3),frontY1 + ((cHeight*yUnit)/4));
      ctx.lineTo((frontX4) + ((cLength*xUnit)/3),frontY4);
      ctx.lineTo((frontX4),frontY4);
      ctx.closePath();
      ctx.stroke();
    } else {
      ctx.strokeStyle = "yellow"; // Front side face
      ctx.beginPath();
      ctx.moveTo(frontX1,frontY1);
      ctx.lineTo(frontX2,frontY2);
      ctx.lineTo(frontX3,frontY3);
      ctx.lineTo((frontX3) - ((cLength*xUnit)/6),frontY3);
      ctx.lineTo((frontX3) - ((cLength*xUnit)/6),frontY1 + ((cHeight*yUnit)/4));
      ctx.lineTo((frontX4) + ((cLength*xUnit)/6),frontY1 + ((cHeight*yUnit)/4));
      ctx.lineTo((frontX4) + ((cLength*xUnit)/6),frontY4);
      ctx.lineTo((frontX4),frontY4);
      ctx.closePath();
      ctx.stroke();
    }
  
    //// Shelf Logic
    shelfCtr = document.getElementById("shelfCount").value;
    var closetShelfWidth = document.getElementById("closetWidth").value;

    var shelfFrontX1 = frontX1 + (((backX1 - frontX1)/closetShelfWidth)*2);
    var shelfFrontY1 = frontY1 + (((frontY4 - frontY1)/document.getElementById("closetHeight").value)*3) + 20;
    var shelfFrontX2 = frontX2 - (((backX1 - frontX1)/closetShelfWidth)*2);
    var shelfFrontY2 = frontY1 + (((frontY4 - frontY1)/document.getElementById("closetHeight").value)*3) + 30;

    console.log("Shelf  X1 : "+ shelfFrontX1 + "  Y1 : "+shelfFrontY1);

    for (var i2 = 0; i2 < shelfCtr; i2++){
      ctx.strokeStyle = "blue"; // Shelf back side face 01
      ctx.beginPath();
      ctx.moveTo(backX1, backY1 + (((backY4 - backY1)/cHeight)*3) - (((backY4 - backY1)/cHeight)*i2));
      ctx.lineTo(backX2, backY1 + (((backY4 - backY1)/cHeight)*3) - (((backY4 - backY1)/cHeight)*i2));
      ctx.lineTo(backX2, backY1 + (((backY4 - backY1)/cHeight)*3) - (((backY4 - backY1)/cHeight)*i2) + 10);
      ctx.lineTo(backX4, backY1 + (((backY4 - backY1)/cHeight)*3) - (((backY4 - backY1)/cHeight)*i2) + 10);
      ctx.closePath();
      ctx.stroke();

      ctx.beginPath(); // Shelf Front side face
      ctx.moveTo( shelfFrontX1, shelfFrontY1 - (((frontY4 - frontY1)/document.getElementById("closetHeight").value)*i2) + (12*i2) );
      ctx.lineTo( shelfFrontX2, shelfFrontY1 - (((frontY4 - frontY1)/document.getElementById("closetHeight").value)*i2) + (12*i2) );
      ctx.lineTo( shelfFrontX2, shelfFrontY2 - (((frontY4 - frontY1)/document.getElementById("closetHeight").value)*i2) + (12*i2) );
      ctx.lineTo( shelfFrontX1, shelfFrontY2 - (((frontY4 - frontY1)/document.getElementById("closetHeight").value)*i2) + (12*i2) );
      ctx.closePath();
      ctx.stroke();
    } 

}
    </script>
    <script id="storageGrid">
        function drawGrid (){
        //// Grid Texts
                //// Length
                if (document.getElementById("closetLength").value > 0){
                    ctx.strokeStyle = "red";
                    ctx.font = "30px Comic Sans MS"; // Length text 
                    ctx.strokeText("LENGTH : " + document.getElementById("closetLength").value, backX4 + 5, backY4 - 5);
                } else{
                    ctx.strokeStyle = "transparent";
                    ctx.font = "30px Comic Sans MS"; // Length text 
                    ctx.strokeText("LENGTH : " + document.getElementById("closetLength").value, backX4 + 5, backY4 - 5); 
                }
                //// Height
                if (document.getElementById("closetHeight").value > 0){
                    ctx.strokeStyle = "orange";
                    ctx.font = "30px Comic Sans MS"; // Length text 
                    ctx.strokeText("HEIGHT : " + document.getElementById("closetHeight").value, backX1 + 5, backY1 + 30);
                } else{
                    ctx.strokeStyle = "transparent";
                    ctx.font = "30px Comic Sans MS"; // Length text 
                    ctx.strokeText("HEIGHT : " + document.getElementById("closetHeight").value, backX1 + 5, backY1 + 30); 
                }
                //// Width
                if (document.getElementById("closetWidth").value > 0){
                    ctx.strokeStyle = "yellow";
                    ctx.font = "30px Comic Sans MS"; // Length text 
                    ctx.strokeText("WIDTH : " + document.getElementById("closetWidth").value, frontX1 + 35, frontY1 + 35);
                } else{
                    ctx.strokeStyle = "transparent";
                    ctx.font = "30px Comic Sans MS"; // Length text 
                    ctx.strokeText("WIDTH : " + document.getElementById("closetWidth").value, frontX1 + 35, frontY1 + 35); 
                }
        //// GRIDS
            for (var j = 0; j < document.getElementById("closetLength").value; j++){
                // Roof Vertical
                ctx.strokeStyle = "green"; 
                ctx.beginPath();
                ctx.moveTo(backX1 + (((backX3 - backX4)/document.getElementById("closetLength").value)*j), backY1);
                ctx.lineTo(frontX1 + (((frontX2 - frontX1)/document.getElementById("closetLength").value)*j), frontY1);
                // Back Wall Vertical
                ctx.moveTo(backX1 + (((backX3 - backX4)/document.getElementById("closetLength").value)*j), backY1);
                ctx.lineTo(backX1 + (((backX3 - backX4)/document.getElementById("closetLength").value)*j), backY4)
                // Floor Vertical
                ctx.moveTo(backX4 + (((backX3 - backX4)/document.getElementById("closetLength").value)*j), backY4);
                ctx.lineTo(frontX4 + (((frontX2 - frontX1)/document.getElementById("closetLength").value)*j), frontY4);
                ctx.closePath();
                ctx.stroke();
            }
            for (var k = 0; k < document.getElementById("closetHeight").value; k++){
                // Right Wall Horizontal
                ctx.beginPath();
                ctx.moveTo(frontX2, frontY1 + (((frontY4 - frontY1)/document.getElementById("closetHeight").value)*k));
                ctx.lineTo(backX2 , backY1 + (((backY4 - backY1)/document.getElementById("closetHeight").value)*k));
                ctx.closePath();
                ctx.stroke();
                // Back Wall Horizontal
                ctx.beginPath();
                ctx.moveTo(backX1, backY1 + (((backY4 - backY1)/document.getElementById("closetHeight").value)*k));
                ctx.lineTo(backX2 , backY1 + (((backY4 - backY1)/document.getElementById("closetHeight").value)*k));
                ctx.closePath();
                ctx.stroke();
                // Left Wall Horizontal
                ctx.beginPath();
                ctx.moveTo(backX1 , backY1 + (((backY4 - backY1)/document.getElementById("closetHeight").value)*k));
                ctx.lineTo(frontX1, frontY1 + (((frontY4 - frontY1)/document.getElementById("closetHeight").value)*k));
                ctx.closePath();
                ctx.stroke();
            }
            for (var m = 0; m < document.getElementById("closetWidth").value; m++){
                // Roof Horizontal
                ctx.beginPath();
                ctx.moveTo( (frontX1 + (((backX1 - frontX1)/document.getElementById("closetWidth").value)*m)) , frontY1 + (((frontY4 - backY4)/document.getElementById("closetWidth").value)*m));
                ctx.lineTo( (frontX3 - (((frontX3 - backX3)/document.getElementById("closetWidth").value)*m)) , frontY1 + (((frontY4 - backY4)/document.getElementById("closetWidth").value)*m));
                //  Right Wall Vertical
                ctx.lineTo( (frontX3 - (((frontX3 - backX3)/document.getElementById("closetWidth").value)*m)) , frontY1 + (((backY1 - frontY1)/document.getElementById("closetWidth").value)*m));
                ctx.lineTo( (frontX3 - (((frontX3 - backX3)/document.getElementById("closetWidth").value)*m)) , frontY4 - (((frontY4 - backY4)/document.getElementById("closetWidth").value)*m));
                // Floor Horizontal
                ctx.lineTo( (frontX3 - (((frontX3 - backX3)/document.getElementById("closetWidth").value)*m)) , frontY4 - (((frontY4 - backY4)/document.getElementById("closetWidth").value)*m));
                ctx.lineTo( (frontX1 + (((backX1 - frontX1)/document.getElementById("closetWidth").value)*m)) , frontY4 - (((frontY4 - backY4)/document.getElementById("closetWidth").value)*m));
                //  Left Wall Vertical
                ctx.lineTo( (frontX1 + (((backX1 - frontX1)/document.getElementById("closetWidth").value)*m)) , frontY4 - (((frontY4 - backY4)/document.getElementById("closetWidth").value)*m));
                ctx.lineTo( (frontX1 + (((backX1 - frontX1)/document.getElementById("closetWidth").value)*m)) , frontY1 + (((backY1 - frontY1)/document.getElementById("closetWidth").value)*m));
                ctx.closePath();
                ctx.stroke();
            }
        }
    </script>

</body>
</html>
